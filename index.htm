<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta name="theme-color" content="#3f51b5">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <title>Attendance Portal</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #f5f5f5;
            margin: 0;
            padding: 20px;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            border: 2px solid #3f51b5;
        }
        
        .header {
            background-color: #3f51b5;
            color: white;
            padding: 15px;
            text-align: center;
        }
        
        .header h1 {
            margin: 0;
            font-size: 24px;
        }
        
        .search-section {
            padding: 15px;
            text-align: center;
            border-bottom: 1px solid #eee;
        }
        
        input[type="text"] {
            padding: 10px;
            width: 200px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        
        button {
            padding: 10px 20px;
            background-color: #3f51b5;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin-left: 10px;
        }
        
        button:hover {
            background-color: #303f9f;
        }
        
        button:disabled {
            background-color: #9fa8da;
            cursor: not-allowed;
        }
        
        .result-card {
            display: none;
            padding: 15px;
        }
        
        .school-info {
            text-align: center;
            margin-bottom: 15px;
        }
        
        .school-logo {
            width: 100px;
            height: 80px;
            margin: 0 auto;
            border-radius: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: transparent;
        }
        
        .school-info h2 {
            margin: 10px 0 5px;
            font-size: 18px;
        }
        
        .student-info {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            margin-bottom: 15px;
            border: 1px solid #eee;
            padding: 10px;
            border-radius: 5px;
        }
        
        .student-info-item {
            flex: 1;
            min-width: 250px;
        }
        
        .student-info p {
            margin: 5px 0;
            font-size: 14px;
        }
        
        .text-right {
            text-align: right;
        }
        
        .exam-info {
            text-align: center;
            margin-bottom: 15px;
            font-size: 14px;
            font-weight: bold;
        }
        
        .exam-info p {
            margin: 5px 0;
        }
        
        /* New styles for attendance display */
        .attendance-section {
            margin-bottom: 20px;
        }
        
        .attendance-summary {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 15px;
            border: 1px solid #eee;
        }
        
        .attendance-summary-item {
            text-align: center;
            flex: 1;
            min-width: 100px;
            padding: 5px;
        }
        
        .attendance-summary-item p {
            margin: 5px 0;
        }
        
        .attendance-summary-item .value {
            font-size: 24px;
            font-weight: bold;
            color: #3f51b5;
        }
        
        .month-selector {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        
        .month-title {
            font-size: 18px;
            font-weight: bold;
            text-align: center;
            flex: 1;
        }
        
        .month-nav {
            background: none;
            border: none;
            color: #3f51b5;
            font-size: 20px;
            cursor: pointer;
            padding: 0 15px;
        }
        
        /* Calendar container with horizontal scroll for mobile */
        .calendar-container {
            width: 100%;
            overflow-x: auto;
            -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
            margin-bottom: 15px;
            padding-bottom: 10px; /* Space for scrollbar */
        }
        
        .calendar {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 5px;
            min-width: 560px; /* Ensure minimum width to prevent squeezing */
        }
        
        .calendar-header {
            text-align: center;
            font-weight: bold;
            padding: 5px;
            background-color: #e9ecef;
            border-radius: 3px;
        }
        
        .calendar-day {
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 5px;
            min-height: 60px;
            text-align: center;
            touch-action: manipulation;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .calendar-day:active {
            background-color: rgba(63, 81, 181, 0.1);
        }
        
        .calendar-day .date {
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .calendar-day .status {
            padding: 3px;
            border-radius: 3px;
            font-size: 12px;
            margin-bottom: 3px;
        }
        
        .present {
            background-color: #e3f2fd;
            color: #1976d2;
            font-weight: bold;
        }
        
        .absent {
            background-color: #ffebee;
            color: #d32f2f;
        }
        
        .no-school {
            background-color: #f5f5f5;
            color: #9e9e9e;
        }
        
        .calendar-day .time-status {
            font-size: 11px;
            margin-top: 3px;
        }
        
        .late {
            color: #f57c00;
        }
        
        .on-time {
            color: #388e3c;
        }
        
        .summary {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            margin-bottom: 15px;
        }
        
        .total-section, .result-section {
            flex: 1;
            min-width: 200px;
            padding: 10px;
            border: 1px solid #eee;
            border-radius: 5px;
            margin: 5px;
        }
        
        .result-section {
            text-align: center;
        }
        
        .signature-section {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            margin-top: 20px;
        }
        
        .signature {
            flex: 1;
            min-width: 150px;
            text-align: center;
            padding: 0 10px;
        }
        
        .signature-image {
            max-width: 120px;
            height: 50px;
            margin: 5px auto;
            display: block;
        }
        
        .error-message {
            color: #F44336;
            text-align: center;
            padding: 15px;
            display: none;
        }
        
        .print-button {
            text-align: center;
            margin: 15px 0;
        }
        
        .disclaimer {
            text-align: center;
            margin: 30px auto 15px;
            font-size: 12px;
            color: #666;
            border-top: 1px solid #eee;
            padding-top: 10px;
            max-width: 90%;
            font-family: 'Times New Roman', Times, serif;
            position: relative;
            clear: both;
            display: block;
        }
        
        .disclaimer p {
            text-align: center;
            margin: 0 auto;
        }
        
        /* Skeleton loader styles */
        .skeleton-loader {
            display: none;
            padding: 15px;
            animation: pulse 1.5s infinite ease-in-out;
        }
        
        @keyframes pulse {
            0% {
                opacity: 0.6;
            }
            50% {
                opacity: 1;
            }
            100% {
                opacity: 0.6;
            }
        }
        
        .skeleton-school-info {
            text-align: center;
            margin-bottom: 15px;
        }
        
        .skeleton-logo {
            width: 100px;
            height: 80px;
            margin: 0 auto;
            background-color: #e0e0e0;
            border-radius: 5px;
        }
        
        .skeleton-title {
            height: 20px;
            width: 60%;
            margin: 10px auto;
            background-color: #e0e0e0;
            border-radius: 3px;
        }
        
        .skeleton-text {
            height: 14px;
            width: 40%;
            margin: 5px auto;
            background-color: #e0e0e0;
            border-radius: 3px;
        }
        
        .skeleton-student-info {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            margin-bottom: 15px;
            border: 1px solid #eee;
            padding: 10px;
            border-radius: 5px;
        }
        
        .skeleton-info-row {
            height: 14px;
            width: 90%;
            margin: 8px 0;
            background-color: #e0e0e0;
            border-radius: 3px;
        }
        
        .skeleton-attendance {
            width: 100%;
            margin-bottom: 15px;
        }
        
        .skeleton-calendar-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
        }
        
        .skeleton-calendar-cell {
            height: 60px;
            flex: 1;
            margin: 0 2px;
            background-color: #e0e0e0;
            border-radius: 3px;
        }
        
        .skeleton-summary {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            margin-bottom: 15px;
        }
        
        .skeleton-section {
            flex: 1;
            min-width: 200px;
            padding: 10px;
            border: 1px solid #eee;
            border-radius: 5px;
            margin: 5px;
        }
        
        .loading-message {
            padding: 15px;
            text-align: center;
            background-color: #fff3e0;
            border-left: 5px solid #FF9800;
            margin: 10px 0;
            display: none;
            border-radius: 4px;
            box-sizing: border-box;
            width: 100%;
        }
        
        .loading-message p {
            margin: 0;
            font-size: 14px;
            color: #795548;
        }
        
        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(63, 81, 181, 0.3);
            border-radius: 50%;
            border-top-color: #3f51b5;
            animation: spin 1s linear infinite;
            margin-right: 10px;
            vertical-align: middle;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .config-section {
            border-top: 1px solid #eee;
            padding: 15px;
            margin-top: 15px;
            display: none;
        }
        
        .config-toggle {
            text-align: center;
            margin: 10px 0;
        }
        
        .config-form {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 10px;
            margin-top: 15px;
        }
        
        .config-form label {
            align-self: center;
            font-weight: bold;
        }
        
        .config-form input[type="text"] {
            width: 100%;
        }
        
        .config-form button {
            grid-column: span 2;
        }
        
        /* Responsive design for all device sizes */
        /* Large phones and small tablets (landscape) */
        @media (max-width: 896px) {
            .container {
                max-width: 95%;
            }
            
            .calendar-day {
                min-height: 50px;
                padding: 4px;
            }
            
            .month-selector {
                margin: 5px 0;
            }
            
            .attendance-summary-item .value {
                font-size: 20px;
            }
        }
        
        /* Medium-sized phones */
        @media (max-width: 768px) {
            .container {
                max-width: 100%;
                margin: 0;
                border-radius: 0;
                border-left: none;
                border-right: none;
            }
            
            .result-card {
                padding: 10px;
            }
            
            .school-logo {
                width: 80px;
                height: 64px;
            }
            
            .student-info-item {
                padding: 5px;
            }
            
            .calendar-day {
                min-height: 45px;
                font-size: 12px;
            }
            
            .calendar-day .date {
                margin-bottom: 2px;
            }
            
            .attendance-summary-item {
                padding: 3px;
                min-width: 80px;
            }
            
            .attendance-summary-item p {
                font-size: 12px;
                margin: 3px 0;
            }
            
            .attendance-summary-item .value {
                font-size: 18px;
            }
            
            .total-section, .result-section {
                margin: 3px;
                padding: 8px;
            }
            
            /* Add scroll indicator for calendar */
            .calendar-container:after {
                content: "⟷ Scroll";
                display: block;
                text-align: center;
                font-size: 12px;
                color: #757575;
                padding: 3px 0;
                position: absolute;
                bottom: -5px;
                width: 100%;
                opacity: 0.7;
                animation: fadeOut 3s forwards 3s;
            }
            
            @keyframes fadeOut {
                from { opacity: 0.7; }
                to { opacity: 0; }
            }
        }
        
        /* Small phones */
        @media (max-width: 600px) {
            body {
                padding: 10px;
            }
            
            .container {
                padding: 0;
                border-radius: 0;
                margin: 0 -10px;
            }
            
            .header h1 {
                font-size: 20px;
            }
            
            .student-info-item {
                min-width: 100%;
                margin-bottom: 10px;
            }
            
            .student-info p strong {
                width: 120px;
                display: inline-block;
            }
            
            .signature {
                min-width: 100%;
                margin-bottom: 15px;
            }
            
            input[type="text"] {
                width: 100%;
                margin-bottom: 10px;
            }
            
            button {
                width: 100%;
                margin-left: 0;
            }
            
            .calendar-header {
                font-size: 12px;
                padding: 3px;
            }
            
            .calendar-day {
                min-height: 40px;
                padding: 3px;
            }
            
            .calendar-day .status {
                font-size: 10px;
                padding: 2px;
            }
            
            .calendar-day .time-status {
                font-size: 9px;
                margin-top: 2px;
            }
            
            .config-form {
                grid-template-columns: 1fr;
            }
            
            .config-form label {
                margin-bottom: -5px;
            }
            
            .config-form button {
                grid-column: 1;
            }
            
            .attendance-summary {
                flex-wrap: wrap;
            }
            
            .attendance-summary-item {
                min-width: 50%;
                flex: 0 0 50%;
                padding: 3px;
                box-sizing: border-box;
            }
            
            .attendance-summary-item .value {
                font-size: 16px;
            }
            
            .month-title {
                font-size: 16px;
            }
            
            .month-nav {
                padding: 0 10px;
            }
        }
        
        /* Extra small phones */
        @media (max-width: 380px) {
            .calendar-day {
                min-height: 35px;
            }
            
            .school-info h2 {
                font-size: 16px;
            }
            
            .student-info p {
                font-size: 12px;
            }
            
            .student-info p strong {
                width: 90px;
            }
            
            .attendance-summary-item {
                min-width: 100%;
                flex: 0 0 100%;
                margin-bottom: 5px;
            }
            
            .summary {
                flex-direction: column;
            }
            
            .total-section, .result-section {
                width: 100%;
                box-sizing: border-box;
            }
            
            .school-logo {
                width: 60px;
                height: 48px;
            }
        }
        
        /* Fix for iOS Safari */
        @supports (-webkit-touch-callout: none) {
            .calendar-day {
                -webkit-touch-callout: none;
                -webkit-tap-highlight-color: transparent;
            }
            
            input[type="text"], button {
                -webkit-appearance: none;
                border-radius: 4px;
            }
        }
        
        @media print {
            body * {
                visibility: hidden;
            }
            
            .result-card, .result-card * {
                visibility: visible;
            }
            
            .result-card {
                position: absolute;
                left: 0;
                top: 0;
                width: 100%;
                border: 2px solid #3f51b5 !important;
                padding: 15px !important;
                box-sizing: border-box !important;
                background-color: white !important;
            }
            
            .student-info {
                border: 1px solid #000 !important;
            }
            
            .calendar-day {
                border: 1px solid #000 !important;
            }
            
            .total-section, .result-section {
                border: 1px solid #000 !important;
            }
            
            .print-button {
                display: none !important;
            }
            
            .present { color: #1976d2 !important; }
            .absent { color: #d32f2f !important; }
            .late { color: #f57c00 !important; }
            .on-time { color: #388e3c !important; }
            
            .disclaimer {
                position: relative !important;
                visibility: visible !important;
                display: block !important;
                margin: 30px auto 15px !important;
                text-align: center !important;
                font-family: 'Times New Roman', Times, serif !important;
                width: 90% !important;
            }
            
            .disclaimer p {
                text-align: center !important;
                margin: 0 auto !important;
                width: 100% !important;
            }
            
            @page {
                size: A4 portrait;
                margin: 10mm;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Student Attendance Portal</h1>
        </div>
        
        <div class="search-section">
            <input type="text" id="rollNumber" placeholder="Enter 5 Digits Admission No.">
            <button id="searchButton" onclick="fetchResult()">Get Attendance</button>
        </div>
        
        <div class="loading-message" id="loadingMessage">
            <p><span class="loading-spinner"></span> Please wait while we fetch attendance data from Google Sheets...</p>
        </div>
        
        <div class="error-message" id="errorMessage">
            Student record not found. Please check the Enrollment number and try again.
        </div>
        
        <!-- Skeleton Loader -->
        <div class="skeleton-loader" id="skeletonLoader">
            <div class="skeleton-school-info">
                <div class="skeleton-logo"></div>
                <div class="skeleton-title"></div>
                <div class="skeleton-text"></div>
            </div>
            
            <div class="skeleton-student-info">
                <div class="student-info-item">
                    <div class="skeleton-info-row"></div>
                    <div class="skeleton-info-row"></div>
                    <div class="skeleton-info-row"></div>
                </div>
                <div class="student-info-item text-right">
                    <div class="skeleton-info-row"></div>
                    <div class="skeleton-info-row"></div>
                    <div class="skeleton-info-row"></div>
                </div>
            </div>
            
            <div class="skeleton-attendance">
                <div class="skeleton-info-row" style="width: 100%; height: 50px;"></div>
                <div class="skeleton-calendar-row">
                    <div class="skeleton-calendar-cell"></div>
                    <div class="skeleton-calendar-cell"></div>
                    <div class="skeleton-calendar-cell"></div>
                    <div class="skeleton-calendar-cell"></div>
                    <div class="skeleton-calendar-cell"></div>
                    <div class="skeleton-calendar-cell"></div>
                    <div class="skeleton-calendar-cell"></div>
                </div>
                <div class="skeleton-calendar-row">
                    <div class="skeleton-calendar-cell"></div>
                    <div class="skeleton-calendar-cell"></div>
                    <div class="skeleton-calendar-cell"></div>
                    <div class="skeleton-calendar-cell"></div>
                    <div class="skeleton-calendar-cell"></div>
                    <div class="skeleton-calendar-cell"></div>
                    <div class="skeleton-calendar-cell"></div>
                </div>
                <div class="skeleton-calendar-row">
                    <div class="skeleton-calendar-cell"></div>
                    <div class="skeleton-calendar-cell"></div>
                    <div class="skeleton-calendar-cell"></div>
                    <div class="skeleton-calendar-cell"></div>
                    <div class="skeleton-calendar-cell"></div>
                    <div class="skeleton-calendar-cell"></div>
                    <div class="skeleton-calendar-cell"></div>
                </div>
            </div>
            
            <div class="skeleton-summary">
                <div class="skeleton-section">
                    <div class="skeleton-info-row"></div>
                    <div class="skeleton-info-row"></div>
                </div>
                <div class="skeleton-section">
                    <div class="skeleton-info-row"></div>
                    <div class="skeleton-info-row"></div>
                </div>
            </div>
        </div>
        
        <div class="result-card" id="resultCard">
            <div class="school-info">
                <div class="school-logo">
                    <img src="https://i.imgur.com/GxoHln6.jpeg" alt="KVS" style="width: 100%; height: 100%; object-fit: contain;">
                </div>
                <h2 id="schoolName">School Name</h2>
                <p>Student Attendance <span id="academicYear"></span></p>
            </div>
            
            <div class="student-info">
                <div class="student-info-item">
                    <p><strong>Name:</strong> <span id="studentName">John Doe</span></p>
                    <p><strong>Enrollment No:</strong> <span id="studentRoll">12345</span></p>
                    <p><strong>Date of Birth:</strong> <span id="studentDOB">01/01/2010</span></p>
                </div>
                <div class="student-info-item text-right">
                    <p><strong>Class:</strong> <span id="studentClass">X-A</span></p>
                    <p><strong>Father's Name:</strong> <span id="fatherName">Mr. John Doe Sr.</span></p>
                    <p><strong>Mother's Name:</strong> <span id="motherName">Mrs. Jane Doe</span></p>
                </div>
            </div>
            
            <!-- New Attendance Section -->
            <div class="attendance-section">
                <div class="attendance-summary">
                    <div class="attendance-summary-item">
                        <p>Total School Days</p>
                        <p class="value" id="totalDays">22</p>
                    </div>
                    <div class="attendance-summary-item">
                        <p>Days Present</p>
                        <p class="value" id="daysPresent">20</p>
                    </div>
                    <div class="attendance-summary-item">
                        <p>Days Absent</p>
                        <p class="value" id="daysAbsent">2</p>
                    </div>
                    <div class="attendance-summary-item">
                        <p>Attendance %</p>
                        <p class="value" id="attendancePercentage">90.9%</p>
                    </div>
                </div>
                
                <div class="month-selector">
                    <button class="month-nav" onclick="previousMonth()">←</button>
                    <div class="month-title" id="currentMonth">March 2025</div>
                    <button class="month-nav" onclick="nextMonth()">→</button>
                </div>
                
                <div class="calendar-container">
                    <div class="calendar">
                        <div class="calendar-header">Sun</div>
                        <div class="calendar-header">Mon</div>
                        <div class="calendar-header">Tue</div>
                        <div class="calendar-header">Wed</div>
                        <div class="calendar-header">Thu</div>
                        <div class="calendar-header">Fri</div>
                        <div class="calendar-header">Sat</div>
                        
                        <!-- Calendar days will be inserted here -->
                        <div id="calendarGrid"></div>
                    </div>
                </div>
            </div>
            
            <div class="summary">
                <div class="total-section">
                    <p><strong>Year to Date:</strong></p>
                    <p>Total School Days: <span id="ytdTotalDays">175</span></p>
                    <p>Days Present: <span id="ytdPresent">165</span></p>
                    <p>Overall Attendance: <span id="ytdPercentage">94.3%</span></p>
                </div>
                <div class="result-section">
                    <p><strong>Attendance Status</strong></p>
                    <p id="attendanceStatus" class="pass">SATISFACTORY</p>
                </div>
            </div>
            
            <div class="signature-section">
                <div class="signature">
                    <img id="classTeacherSignature" src="" alt="Class Teacher Signature" class="signature-image" style="display: none;">
                    <p>Class Teacher</p>
                </div>
                <div class="signature">
                    <img id="principalSignature" src="" alt="Principal Signature" class="signature-image" style="display: none;">
                    <p>Principal</p>
                </div>
            </div>
            
            <div class="disclaimer">
                <p style="text-align: center;"><strong>Disclaimer:</strong> This is not an official attendance record. This data is provided for informational purposes only and may not reflect the complete official records maintained by the school.</p>
            </div>
            
            <div class="print-button">
                <button onclick="window.print()" style="background-color: #4CAF50;">Print Attendance</button>
            </div>
        </div>
        
        <!-- Configuration Section (Hidden by default, can be shown for admin) -->
        <div class="config-section" id="configSection">
            <h3>Google Sheets Configuration</h3>
            <div class="config-form">
                <label for="sheetId">Google Sheet ID:</label>
                <input type="text" id="sheetId" placeholder="1vPv4LOlVgiJT1Ik7wLkJHdgcUrA8bxPRCeE6Oi9s6K0">
                
                <label for="apiKey">API Key:</label>
                <input type="text" id="apiKey" placeholder="AIzaSyCNqaTLpfOIVBOyjIiWDsET5N4CU-16qCA">
                
                <label for="studentSheet">Student Sheet Name:</label>
                <input type="text" id="studentSheet" placeholder="e.g., Students">
                
                <label for="attendanceSheet">Attendance Sheet Name:</label>
                <input type="text" id="attendanceSheet" placeholder="e.g., Attendance">
                
                <button onclick="saveConfig()">Save Configuration</button>
            </div>
        </div>
        
        <div class="config-toggle">
            <button onclick="toggleConfig()" id="configToggleBtn" style="background-color: #757575;">Show Configuration</button>
        </div>
    </div>

    <!-- Load Google API Client -->
    <script src="https://apis.google.com/js/api.js"></script>
    
    <script>
        // Add touch event listeners for mobile
        document.addEventListener('DOMContentLoaded', function() {
            // Add touch feedback for buttons
            const allButtons = document.querySelectorAll('button');
            allButtons.forEach(button => {
                button.addEventListener('touchstart', function() {
                    this.style.opacity = '0.7';
                });
                button.addEventListener('touchend', function() {
                    this.style.opacity = '1';
                });
            });
            
            // Fix for iOS momentum scrolling
            const fixIOSScroll = function() {
                if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
                    document.body.style.WebkitOverflowScrolling = 'touch';
                }
            };
            fixIOSScroll();
            
            // Add swipe navigation for months on mobile
            const calendarSection = document.querySelector('.attendance-section');
            let touchStartX = 0;
            let touchEndX = 0;
            
            calendarSection.addEventListener('touchstart', e => {
                touchStartX = e.changedTouches[0].screenX;
            }, false);
            
            calendarSection.addEventListener('touchend', e => {
                touchEndX = e.changedTouches[0].screenX;
                handleSwipe();
            }, false);
            
            function handleSwipe() {
                const swipeThreshold = 50;
                if (touchEndX < touchStartX - swipeThreshold) {
                    // Swipe left - next month
                    nextMonth();
                }
                if (touchEndX > touchStartX + swipeThreshold) {
                    // Swipe right - previous month
                    previousMonth();
                }
            }
        });
        
        // Variables for Google Sheets API
        let SHEET_ID = '';
        let API_KEY = '';
        let STUDENT_SHEET = 'Students';
        let ATTENDANCE_SHEET = 'Attendance';
        
        // Current month and year for attendance display
        let currentDisplayMonth = new Date().getMonth();
        let currentDisplayYear = new Date().getFullYear();
        
        // Cache for loaded data
        let studentCache = {};
        let attendanceCache = {};
        let currentStudent = null;

        // Load saved configuration
        function loadConfig() {
            const savedConfig = localStorage.getItem('attendanceConfig');
            if (savedConfig) {
                const config = JSON.parse(savedConfig);
                SHEET_ID = config.sheetId || '';
                API_KEY = config.apiKey || '';
                STUDENT_SHEET = config.studentSheet || 'Students';
                ATTENDANCE_SHEET = config.attendanceSheet || 'Attendance';
                
                // Update form fields
                document.getElementById('sheetId').value = SHEET_ID;
                document.getElementById('apiKey').value = API_KEY;
                document.getElementById('studentSheet').value = STUDENT_SHEET;
                document.getElementById('attendanceSheet').value = ATTENDANCE_SHEET;
            }
        }

        // Save configuration
        function saveConfig() {
            SHEET_ID = document.getElementById('sheetId').value;
            API_KEY = document.getElementById('apiKey').value;
            STUDENT_SHEET = document.getElementById('studentSheet').value || 'Students';
            ATTENDANCE_SHEET = document.getElementById('attendanceSheet').value || 'Attendance';
            
            const config = {
                sheetId: SHEET_ID,
                apiKey: API_KEY,
                studentSheet: STUDENT_SHEET,
                attendanceSheet: ATTENDANCE_SHEET
            };
            
            localStorage.setItem('attendanceConfig', JSON.stringify(config));
            alert('Configuration saved successfully!');
            
            // Clear caches when config changes
            studentCache = {};
            attendanceCache = {};
        }

        // Toggle configuration section
        function toggleConfig() {
            const configSection = document.getElementById('configSection');
            const configBtn = document.getElementById('configToggleBtn');
            
            if (configSection.style.display === 'block') {
                configSection.style.display = 'none';
                configBtn.textContent = 'Show Configuration';
            } else {
                configSection.style.display = 'block';
                configBtn.textContent = 'Hide Configuration';
            }
        }

        // Initialize Google API
        function initGoogleAPI() {
            gapi.load('client', () => {
                gapi.client.init({
                    apiKey: API_KEY,
                    discoveryDocs: ['https://sheets.googleapis.com/$discovery/rest?version=v4']
                }).then(() => {
                    console.log('Google API initialized');
                }, (error) => {
                    console.error('Error initializing Google API:', error);
                });
            });
        }

        // Fetch student data from Google Sheets
        async function fetchStudentData(rollNumber) {
            // Check cache first
            if (studentCache[rollNumber]) {
                return studentCache[rollNumber];
            }
            
            if (!SHEET_ID || !API_KEY) {
                throw new Error('Google Sheets configuration is not set. Please configure it first.');
            }
            
            try {
                // Fetch student data from Google Sheets
                const response = await gapi.client.sheets.spreadsheets.values.get({
                    spreadsheetId: SHEET_ID,
                    range: `${STUDENT_SHEET}!A:G`
                });
                
                const rows = response.result.values || [];
                if (rows.length <= 1) {
                    throw new Error('No student data found in the sheet');
                }
                
                // Assuming first row is header
                const headers = rows[0];
                
                // Find the Roll Number/Admission Number column index
                const rollIndex = headers.findIndex(header => 
                    header.toLowerCase().includes('roll') || 
                    header.toLowerCase().includes('admission') || 
                    header.toLowerCase().includes('id'));
                
                if (rollIndex === -1) {
                    throw new Error('Roll Number/Admission Number column not found');
                }
                
                // Find student by roll number
                const studentRow = rows.find(row => row[rollIndex] === rollNumber);
                
                if (!studentRow) {
                    return null; // Student not found
                }
                
                // Map student data
                const student = {
                    name: studentRow[headers.findIndex(h => h.toLowerCase().includes('name'))],
                    class: studentRow[headers.findIndex(h => h.toLowerCase().includes('class'))],
                    school: 'Kendriya Vidyalaya', // Can be dynamically set from sheet or config
                    dob: studentRow[headers.findIndex(h => h.toLowerCase().includes('dob') || h.toLowerCase().includes('birth'))],
                    fatherName: studentRow[headers.findIndex(h => h.toLowerCase().includes('father'))],
                    motherName: studentRow[headers.findIndex(h => h.toLowerCase().includes('mother'))]
                };
                
                // Cache this student data
                studentCache[rollNumber] = student;
                
                return student;
            } catch (error) {
                console.error('Error fetching student data:', error);
                throw error;
            }
        }

        // Fetch attendance data from Google Sheets
        async function fetchAttendanceData(rollNumber) {
            // Check cache first
            if (attendanceCache[rollNumber]) {
                return attendanceCache[rollNumber];
            }
            
            if (!SHEET_ID || !API_KEY) {
                throw new Error('Google Sheets configuration is not set. Please configure it first.');
            }
            
            try {
                // Fetch attendance data from Google Sheets
                const response = await gapi.client.sheets.spreadsheets.values.get({
                    spreadsheetId: SHEET_ID,
                    range: `${ATTENDANCE_SHEET}!A:Z`
                });
                
                const rows = response.result.values || [];
                if (rows.length <= 1) {
                    throw new Error('No attendance data found in the sheet');
                }
                
                // Assuming first row is header
                const headers = rows[0];
                
                // Find the Roll Number/Admission Number column index
                const rollIndex = headers.findIndex(header => 
                    header.toLowerCase().includes('roll') || 
                    header.toLowerCase().includes('admission') || 
                    header.toLowerCase().includes('id'));
                
                if (rollIndex === -1) {
                    throw new Error('Roll Number/Admission Number column not found in attendance sheet');
                }
                
                // Find rows for this student
                const studentAttendanceRows = rows.filter(row => row[rollIndex] === rollNumber);
                
                if (studentAttendanceRows.length === 0) {
                    throw new Error('No attendance records found for this student');
                }
                
                // Find date, status, and time columns
                const dateIndex = headers.findIndex(h => h.toLowerCase().includes('date'));
                const statusIndex = headers.findIndex(h => h.toLowerCase().includes('status') || h.toLowerCase().includes('present') || h.toLowerCase().includes('absent'));
                const timeIndex = headers.findIndex(h => h.toLowerCase().includes('time') || h.toLowerCase().includes('late'));
                
                if (dateIndex === -1 || statusIndex === -1) {
                    throw new Error('Required attendance data columns not found');
                }
                
                // Process attendance data by month
                const attendanceByMonth = {};
                let totalSchoolDays = 0;
                let totalPresent = 0;
                
                studentAttendanceRows.forEach(row => {
                    const dateStr = row[dateIndex];
                    if (!dateStr) return;
                    
                    // Parse date from format DD/MM/YYYY or MM/DD/YYYY
                    let date;
                    if (dateStr.includes('/')) {
                        const parts = dateStr.split('/');
                        if (parts[0].length === 2 && parts[1].length === 2) {
                            // Assuming DD/MM/YYYY format
                            date = new Date(`${parts[1]}/${parts[0]}/${parts[2]}`);
                        } else {
                            // Assuming MM/DD/YYYY format
                            date = new Date(dateStr);
                        }
                    } else if (dateStr.includes('-')) {
                        date = new Date(dateStr);
                    } else {
                        return; // Skip if date format is unknown
                    }
                    
                    if (isNaN(date.getTime())) return; // Skip invalid dates
                    
                    const month = date.getMonth();
                    const year = date.getFullYear();
                    const day = date.getDate();
                    
                    // Create month entry if it doesn't exist
                    const monthKey = `${month}-${year}`;
                    if (!attendanceByMonth[monthKey]) {
                        attendanceByMonth[monthKey] = {
                            month,
                            year,
                            totalDays: 0,
                            daysPresent: 0,
                            daysAbsent: 0,
                            percentage: 0,
                            days: []
                        };
                    }
                    
                    // Parse status
                    const statusValue = row[statusIndex] ? row[statusIndex].toLowerCase() : '';
                    const isPresent = statusValue.includes('p') || statusValue.includes('present') || statusValue === '1';
                    
                    // Parse time status
                    let timeStatus = '';
                    if (timeIndex !== -1 && row[timeIndex]) {
                        const timeValue = row[timeIndex].toLowerCase();
                        if (timeValue.includes('late') || timeValue.includes('delay')) {
                            timeStatus = 'late';
                        } else if (isPresent) {
                            timeStatus = 'on-time';
                        }
                    } else if (isPresent) {
                        timeStatus = 'on-time'; // Default for present students
                    }
                    
                    // Add day to month
                    attendanceByMonth[monthKey].days.push({
                        day,
                        isSchoolDay: true,
                        status: isPresent ? 'present' : 'absent',
                        timeStatus
                    });
                    
                    // Update monthly counters
                    attendanceByMonth[monthKey].totalDays++;
                    if (isPresent) {
                        attendanceByMonth[monthKey].daysPresent++;
                    } else {
                        attendanceByMonth[monthKey].daysAbsent++;
                    }
                    
                    // Update yearly counters
                    totalSchoolDays++;
                    if (isPresent) totalPresent++;
                });
                
                // Calculate percentages and format months as array
                const months = Object.values(attendanceByMonth).map(month => {
                    if (month.totalDays > 0) {
                        month.percentage = ((month.daysPresent / month.totalDays) * 100).toFixed(1);
                    }
                    return month;
                });
                
                // Fill in weekend days for complete calendar display
                months.forEach(month => {
                    const daysInMonth = new Date(month.year, month.month + 1, 0).getDate();
                    
                    // Create a map for quick lookup of existing days
                    const existingDays = {};
                    month.days.forEach(day => {
                        existingDays[day.day] = true;
                    });
                    
                    // Add missing days (weekends and holidays)
                    for (let day = 1; day <= daysInMonth; day++) {
                        if (!existingDays[day]) {
                            const date = new Date(month.year, month.month, day);
                            const dayOfWeek = date.getDay();
                            const isWeekend = (dayOfWeek === 0 || dayOfWeek === 6);
                            
                            month.days.push({
                                day,
                                isSchoolDay: false,
                                status: 'no-school',
                                timeStatus: '',
                                isWeekend
                            });
                        }
                    }
                    
                    // Sort days numerically
                    month.days.sort((a, b) => a.day - b.day);
                });
                
                // Create full attendance data object
                const attendanceData = {
                    attendance: {
                        yearToDate: {
                            totalDays: totalSchoolDays,
                            daysPresent: totalPresent,
                            daysAbsent: totalSchoolDays - totalPresent,
                            percentage: totalSchoolDays > 0 ? ((totalPresent / totalSchoolDays) * 100).toFixed(1) : 0
                        },
                        months
                    }
                };
                
                // Cache this attendance data
                attendanceCache[rollNumber] = attendanceData;
                
                return attendanceData;
            } catch (error) {
                console.error('Error fetching attendance data:', error);
                throw error;
            }
        }

        // Combine student and attendance data
        async function fetchCombinedData(rollNumber) {
            try {
                const studentData = await fetchStudentData(rollNumber);
                if (!studentData) {
                    return null; // Student not found
                }
                
                const attendanceData = await fetchAttendanceData(rollNumber);
                if (!attendanceData) {
                    // If no attendance data, return student with empty attendance
                    return {
                        student: studentData,
                        attendance: {
                            yearToDate: {
                                totalDays: 0,
                                daysPresent: 0,
                                daysAbsent: 0,
                                percentage: 0
                            },
                            months: []
                        }
                    };
                }
                
                // Combine the data
                return {
                    student: studentData,
                    ...attendanceData
                };
            } catch (error) {
                console.error('Error fetching combined data:', error);
                throw error;
            }
        }

        // Display attendance data
        function displayAttendance(data, rollNumber) {
            if (!data || !data.student) {
                // If no data, show error
                document.getElementById('errorMessage').textContent = "Student record not found. Please check the Enrollment number and try again.";
                document.getElementById('errorMessage').style.display = 'block';
                return;
            }
            
            // Store current student data
            currentStudent = data;
            
            // Set student info
            document.getElementById('studentName').textContent = data.student.name || 'N/A';
            document.getElementById('studentRoll').textContent = rollNumber;
            document.getElementById('studentClass').textContent = data.student.class || 'N/A';
            document.getElementById('academicYear').textContent = "2024-25";
            document.getElementById('schoolName').textContent = data.student.school || 'School Name';
            document.getElementById('studentDOB').textContent = data.student.dob || 'N/A';
            document.getElementById('fatherName').textContent = data.student.fatherName || 'N/A';
            document.getElementById('motherName').textContent = data.student.motherName || 'N/A';
            
            // Set year-to-date attendance data
            const ytd = data.attendance.yearToDate;
            document.getElementById('ytdTotalDays').textContent = ytd.totalDays;
            document.getElementById('ytdPresent').textContent = ytd.daysPresent;
            document.getElementById('ytdPercentage').textContent = ytd.percentage + '%';
            
            // Set attendance status based on percentage
            const ytdPercentage = parseFloat(ytd.percentage);
            const attendanceStatus = document.getElementById('attendanceStatus');
            
            if (ytdPercentage >= 90) {
                attendanceStatus.textContent = 'EXCELLENT';
                attendanceStatus.className = 'pass';
            } else if (ytdPercentage >= 80) {
                attendanceStatus.textContent = 'SATISFACTORY';
                attendanceStatus.className = 'pass';
            } else if (ytdPercentage >= 75) {
                attendanceStatus.textContent = 'AVERAGE';
                attendanceStatus.className = 'pass';
            } else {
                attendanceStatus.textContent = 'NEEDS IMPROVEMENT';
                attendanceStatus.className = 'fail';
            }
            
            // Display the current month's attendance
            displayMonthAttendance();
            
            // Show the result card
            document.getElementById('resultCard').style.display = 'block';
        }

        function displayMonthAttendance() {
            if (!currentStudent) return;
            
            // Get the month data for the currently selected month/year
            const monthData = currentStudent.attendance.months.find(m => 
                m.month === currentDisplayMonth && m.year === currentDisplayYear
            );
            
            // If no data for this month, show empty calendar
            if (!monthData) {
                // Show empty calendar for month
                generateEmptyCalendar(currentDisplayMonth, currentDisplayYear);
                
                // Reset summary data
                document.getElementById('totalDays').textContent = '0';
                document.getElementById('daysPresent').textContent = '0';
                document.getElementById('daysAbsent').textContent = '0';
                document.getElementById('attendancePercentage').textContent = '0%';
                
                return;
            }
            
            // Update month title
            const monthNames = ["January", "February", "March", "April", "May", "June",
                                "July", "August", "September", "October", "November", "December"];
            document.getElementById('currentMonth').textContent = `${monthNames[monthData.month]} ${monthData.year}`;
            
            // Update summary data
            document.getElementById('totalDays').textContent = monthData.totalDays;
            document.getElementById('daysPresent').textContent = monthData.daysPresent;
            document.getElementById('daysAbsent').textContent = monthData.daysAbsent;
            document.getElementById('attendancePercentage').textContent = `${monthData.percentage}%`;
            
            // Generate calendar
            generateCalendar(monthData);
        }

        function generateCalendar(monthData) {
            const daysInMonth = new Date(monthData.year, monthData.month + 1, 0).getDate();
            const firstDayOfMonth = new Date(monthData.year, monthData.month, 1).getDay();
            
            // Clear calendar grid
            const calendarElement = document.querySelector('.calendar');
            const calendarHeaders = document.querySelectorAll('.calendar-header');
            
            // Remove all calendar days but keep headers
            const calendarDays = document.querySelectorAll('.calendar-day');
            calendarDays.forEach(day => day.remove());
            
            // Create calendar cells
            // Add empty cells for days before the first day of the month
            for (let i = 0; i < firstDayOfMonth; i++) {
                const emptyDay = document.createElement('div');
                emptyDay.className = 'calendar-day';
                calendarElement.appendChild(emptyDay);
            }
            
            // Add days of the month
            for (let day = 1; day <= daysInMonth; day++) {
                const dayData = monthData.days.find(d => d.day === day);
                
                const dayCell = document.createElement('div');
                dayCell.className = 'calendar-day';
                
                const dateDiv = document.createElement('div');
                dateDiv.className = 'date';
                dateDiv.textContent = day;
                dayCell.appendChild(dateDiv);
                
                if (dayData) {
                    const statusDiv = document.createElement('div');
                    statusDiv.className = `status ${dayData.status}`;
                    statusDiv.textContent = dayData.isSchoolDay ? 
                        (dayData.status === 'present' ? 'Present' : 'Absent') : 
                        'No School';
                    dayCell.appendChild(statusDiv);
                    
                    if (dayData.timeStatus) {
                        const timeStatusDiv = document.createElement('div');
                        timeStatusDiv.className = `time-status ${dayData.timeStatus}`;
                        timeStatusDiv.textContent = dayData.timeStatus === 'late' ? 'Came Late' : 'On Time';
                        dayCell.appendChild(timeStatusDiv);
                    }
                }
                
                calendarElement.appendChild(dayCell);
            }
            
            // Scroll to the start of the calendar (for mobile)
            const calendarContainer = document.querySelector('.calendar-container');
            if (calendarContainer) {
                calendarContainer.scrollLeft = 0;
            }
        }

        function generateEmptyCalendar(month, year) {
            const daysInMonth = new Date(year, month + 1, 0).getDate();
            const firstDayOfMonth = new Date(year, month, 1).getDay();
            
            // Update month title
            const monthNames = ["January", "February", "March", "April", "May", "June",
                                "July", "August", "September", "October", "November", "December"];
            document.getElementById('currentMonth').textContent = `${monthNames[month]} ${year}`;
            
            // Clear calendar grid
            const calendarElement = document.querySelector('.calendar');
            const calendarHeaders = document.querySelectorAll('.calendar-header');
            
            // Remove all calendar days but keep headers
            const calendarDays = document.querySelectorAll('.calendar-day');
            calendarDays.forEach(day => day.remove());
            
            // Add empty cells for days before the first day of the month
            for (let i = 0; i < firstDayOfMonth; i++) {
                const emptyDay = document.createElement('div');
                emptyDay.className = 'calendar-day';
                calendarElement.appendChild(emptyDay);
            }
            
            // Add days of the month (empty)
            for (let day = 1; day <= daysInMonth; day++) {
                const dayCell = document.createElement('div');
                dayCell.className = 'calendar-day';
                
                const dateDiv = document.createElement('div');
                dateDiv.className = 'date';
                dateDiv.textContent = day;
                dayCell.appendChild(dateDiv);
                
                calendarElement.appendChild(dayCell);
            }
            
            // Scroll to the start of the calendar (for mobile)
            const calendarContainer = document.querySelector('.calendar-container');
            if (calendarContainer) {
                calendarContainer.scrollLeft = 0;
            }
        }

        function previousMonth() {
            if (currentDisplayMonth === 0) {
                currentDisplayMonth = 11;
                currentDisplayYear--;
            } else {
                currentDisplayMonth--;
            }
            
            // Re-display the month with new dates
            displayMonthAttendance();
        }

        function nextMonth() {
            if (currentDisplayMonth === 11) {
                currentDisplayMonth = 0;
                currentDisplayYear++;
            } else {
                currentDisplayMonth++;
            }
            
            // Don't allow going beyond current month
            const today = new Date();
            if (currentDisplayYear > today.getFullYear() || 
                (currentDisplayYear === today.getFullYear() && currentDisplayMonth > today.getMonth())) {
                currentDisplayMonth = today.getMonth();
                currentDisplayYear = today.getFullYear();
                return;
            }
            
            // Re-display the month with new dates
            displayMonthAttendance();
        }

        function showLoading() {
            const skeletonLoader = document.getElementById('skeletonLoader');
            const loadingMessage = document.getElementById('loadingMessage');
            const searchButton = document.getElementById('searchButton');
            
            // Show skeleton loader
            skeletonLoader.style.display = 'block';
            
            // Show loading message
            loadingMessage.style.display = 'block';
            
            // Disable the search button
            searchButton.disabled = true;
            searchButton.textContent = 'Loading...';
        }

        function hideLoading() {
            const skeletonLoader = document.getElementById('skeletonLoader');
            const loadingMessage = document.getElementById('loadingMessage');
            const searchButton = document.getElementById('searchButton');
            
            // Hide skeleton loader
            skeletonLoader.style.display = 'none';
            
            // Hide loading message
            loadingMessage.style.display = 'none';
            
            // Enable the search button
            searchButton.disabled = false;
            searchButton.textContent = 'Get Attendance';
        }

        async function fetchResult() {
            const rollNumber = document.getElementById('rollNumber').value;
            const resultCard = document.getElementById('resultCard');
            const errorMessage = document.getElementById('errorMessage');
            
            // Reset display
            resultCard.style.display = 'none';
            errorMessage.style.display = 'none';
            
            // Validate input
            if (!rollNumber.trim()) {
                errorMessage.textContent = "Please enter an admission number";
                errorMessage.style.display = 'block';
                return;
            }
            
            // Check if Google Sheets config is set
            if (!SHEET_ID || !API_KEY) {
                errorMessage.textContent = "Google Sheets configuration is not set. Please configure it first.";
                errorMessage.style.display = 'block';
                toggleConfig(); // Show the config section
                return;
            }
            
            // Reset current month and year to current date
            const today = new Date();
            currentDisplayMonth = today.getMonth();
            currentDisplayYear = today.getFullYear();
            
            // Show loading state
            showLoading();
            
            try {
                // Init Google API if not already initialized
                if (!gapi.client || !gapi.client.sheets) {
                    await new Promise((resolve) => {
                        gapi.load('client', async () => {
                            await gapi.client.init({
                                apiKey: API_KEY,
                                discoveryDocs: ['https://sheets.googleapis.com/$discovery/rest?version=v4']
                            });
                            resolve();
                        });
                    });
                }
                
                // Fetch data
                const data = await fetchCombinedData(rollNumber);
                
                // Hide loading state
                hideLoading();
                
                if (data && data.student) {
                    displayAttendance(data, rollNumber);
                } else {
                    errorMessage.textContent = "Student record not found. Please check the Enrollment number and try again.";
                    errorMessage.style.display = 'block';
                }
            } catch (error) {
                // Hide loading state
                hideLoading();
                
                // Show error message
                errorMessage.textContent = `Error: ${error.message || 'Failed to fetch attendance data'}`;
                errorMessage.style.display = 'block';
                console.error('Error:', error);
            }
        }
        
        // Add event listener for Enter key on roll number input
        document.getElementById('rollNumber').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                fetchResult();
            }
        });
        
        // Load saved configuration on page load
        window.addEventListener('DOMContentLoaded', loadConfig);
        
        // Handle orientation changes for better mobile experience
        window.addEventListener('orientationchange', function() {
            // Small delay to allow the browser to complete orientation change
            setTimeout(function() {
                // Re-render the calendar if it's visible
                if (document.getElementById('resultCard').style.display === 'block') {
                    displayMonthAttendance();
                }
            }, 300);
        });
        
        // Fix for iOS input focus issues
        if (/iPad|iPhone|iPod/.test(navigator.userAgent)) {
            document.getElementById('rollNumber').addEventListener('focus', function() {
                document.body.scrollTop = 0;
            });
        }
    </script>
</body>
</html>
